Занятие 01: Стек на С++, первая итерация
Программирование на C++ (открытый курс)
Summary

На лекции мы рассмотрели реализацию стека на С и С++ в разных вариантах - от кошмарного до умеренно-приемлемого. Контейнерные структуры данных, к которым относится стек, позволяют хорошо выявить как удобства, так и проблемы в С++, поэтому мы и начали рассмотрение языка с них. В нескольких следующих лекциях по контейнерам мы разберем многие темные места С++, о которых должен знать каждый разработчик.

Также был краткий туториал по тому, как пользоваться Гитом и Гитхабом, которым мы будем постоянно пользоваться.

Презентация: http://gofile.me/2fK55/3cpGemMAV
Жду правок в комментах :)

Домашнее задание

0. Сделайте репозиторий для ваших работ по курсу на Github. Каждую задачу удобно помещать в отдельную папку внутри папки самого репозитория. Оставьте ссылку на Ваш репозиторий в комментах к этой записи, не забудьте указать свое имя, фамилию и почту.

1. Реализуйте структуру данных Стек на С++. Множество функций стека возьмите из описания класса stack из стандартной библиотеки STL здесь или здесь. Тип container_type, функции emplace(), swap(), операторы и helper classes реализовывать не нужно. Добавьте верификатор и дамп для класса.

2. Протестируйте ваш класс юнит-тестами. Рассмотрите в том числе краевые и ошибочные случаи.

3. Создайте ветку в репозитории для задачи о стеке и сделайте коммит в репозиторий. Не забудьте о синхронизации с сервером.

4. Обменяйтесь кодом со своим коллегой и постарайтесь "сломать" его стек так, чтобы это не ловилось его системой диагностики (верификацией и дампами), или получалась бы диагностика невнятная и неполная. При этом не изменяйте чужой код, а сделайте свой файл для тестирования стека, в который включите стековую библиотеку коллеги, и уже в этом файле порезвитесь. :) В этот момент Ваш коллега будет "ломать" уже Ваш код. :) Если вас трое в команде, можно поменяться циклически, или поломать два стека от двух коллег. По итогам перекрестного тестирования доработайте стек и сделайте второй коммит в репозиторий (также не забудьте о синхронизации).

Я сделал slack для общения внутри нашего курса. Инвайт здесь.

***